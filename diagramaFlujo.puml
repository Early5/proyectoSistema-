@startuml
title Diagrama de Flujo del Sistema de Gestión de Laboratorios

scale 0.8

partition "Flujo Principal: main()" {
  start
  :Mostrar Menú Principal;
  repeat
    :Solicitar Opción (1-6);
    if (Opción = '1'?) then (Sí)
      :Llamar a **registrarLaboratorio()**;
    else if (Opción = '2'?) then (Sí)
      :Llamar a **ingresarDatosUso()**;
    else if (Opción = '3'?) then (Sí)
      :Llamar a **generarReportes()**;
    else if (Opción = '4'?) then (Sí)
      :Llamar a **filtrarDatos()**;
    else if (Opción = '5'?) then (Sí)
      :Llamar a **generarCandidatosRenovacion()**;
    else if (Opción = '6'?) then (Sí)
      :Mostrar Alerta 'Saliendo del sistema...';
      break
    else (No)
      :Mostrar Alerta 'Opción no válida.';
    endif
  repeat while (Opción != '6') is (Continuar)
  end
}

---

partition "Función: registrarLaboratorio()" {
  start
  :Solicitar Nombre Laboratorio;
  if (Nombre Lab es vacío?) then (Sí)
    :Mostrar Alerta 'Nombre no válido.';
  else (No)
    :Solicitar Cantidad Equipos;
    if (Cantidad Equipos es válida (número > 0)?) then (Sí)
      :Inicializar Array 'equipos';
      fork
        :Bucle: Para cada equipo (i=0 a cantidad-1);
        :Solicitar Edad Equipo i+1;
        :Añadir Equipo a 'equipos' con sus propiedades;
      end fork
      :Añadir nuevo Laboratorio a 'laboratorios';
      :Mostrar Alerta 'Laboratorio registrado con X equipos.';
    else (No)
      :Mostrar Alerta 'Cantidad no válida.';
    endif
  endif
  end
}

---

partition "Función: ingresarDatosUso()" {
  start
  if (Hay laboratorios registrados?) then (No)
    :Mostrar Alerta 'No hay laboratorios.';
  else (Sí)
    :Llamar a **seleccionarLaboratorio()** (auxiliar);
    if (Laboratorio Seleccionado (índice) es válido (no es null)?) then (No)
      'Ignorar y terminar';
    else (Sí)
      :Obtener objeto 'laboratorio' seleccionado;
      :Solicitar Fecha de Registro;
      if (Fecha es válida (no es vacía)?) then (No)
        'Ignorar y terminar';
      else (Sí)
        :Inicializar 'registroDiario' con fecha y equipos vacío;
        fork
          :Bucle: Para cada 'equipo' en 'laboratorio.equipos';
          :Solicitar Horas de Uso para Equipo;
          if (Horas de Uso es válida (0-24)?) then (No)
            :Mostrar Alerta 'Horas no válidas. Se usará 0.';
          else (Sí)
            :Solicitar Usuario Principal;
            :Solicitar si Equipo presentó Fallo (s/n);
            if (Fallo es 's'?) then (Sí)
              :Solicitar Tipo de Fallo;
              :Incrementar equipo.fallos;
            endif
            :Actualizar equipo.horasUso, equipo.diasUso, equipo.usuarioPrincipal;
            :Añadir registro de este equipo a 'registroDiario.equipos';
          endif
        end fork
        :Añadir 'registroDiario' a 'laboratorio.registros';
        :Mostrar Alerta 'Datos registrados.';
      endif
    endif
  endif
  end
}

---

partition "Función: generarReportes()" {
  start
  if (Hay laboratorios registrados?) then (No)
    :Mostrar Alerta 'No hay laboratorios.';
  else (Sí)
    :Inicializar 'reporte' con encabezado;
    fork
      :Bucle: Para cada 'lab' en 'laboratorios';
      :Añadir nombre de laboratorio al reporte;
      :Inicializar variables para estadísticas: equiposCriticos, subutilizados, usuariosFrecuentes, totalHoras;
      fork
        :Bucle: Para cada 'equipo' en 'lab.equipos';
        :Calcular promedioDiario de uso;
        if (Promedio > 8 o Fallos >= 1? (Equipo Crítico)) then (Sí)
          :Añadir equipo a 'equiposCriticos';
        else (No)
          if (Promedio < 2 y DíasUso > 0? (Equipo Subutilizado)) then (Sí)
            :Añadir equipo a 'equiposSubutilizados';
          endif
        endif
        if (Equipo tiene usuarioPrincipal?) then (Sí)
          :Contar frecuencia de usuario en 'usuariosFrecuentes';
        endif
      end fork
      :Calcular Promedio General del Laboratorio;
      :Añadir estadísticas al reporte: Promedio, Equipos Críticos, Equipos Subutilizados, Usuarios Frecuentes;
    end fork
    :Mostrar Alerta con 'reporte' completo;
  endif
  end
}

---

partition "Función: filtrarDatos()" {
  start
  if (Hay laboratorios registrados?) then (No)
    :Mostrar Alerta 'No hay laboratorios.';
  else (Sí)
    :Solicitar Criterio de Filtrado (1-4);
    if (Criterio = '1'?) then (Sí)
      :Llamar a **filtrarPorLaboratorio()**;
    else if (Criterio = '2'?) then (Sí)
      :Llamar a **filtrarPorFecha()**;
    else if (Criterio = '3'?) then (Sí)
      :Llamar a **filtrarPorUsuario()**;
    else if (Criterio = '4'?) then (Sí)
      :Llamar a **filtrarEquiposConFallos()**;
    else (No)
      :Mostrar Alerta 'Opción no válida.';
    endif
  endif
  end
}

---

partition "Función: generarCandidatosRenovacion()" {
  start
  if (Hay laboratorios registrados?) then (No)
    :Mostrar Alerta 'No hay laboratorios.';
  else (Sí)
    :Definir Umbrales (Edad, Uso Excesivo, Fallos);
    :Inicializar 'candidatos' array;
    fork
      :Bucle: Para cada 'laboratorio' en 'laboratorios';
      fork
        :Bucle: Para cada 'equipo' en 'laboratorio.equipos';
        :Calcular promedioUsoDiario;
        :Inicializar 'motivos' array;
        if (Edad del equipo >= UMBRAL_EDAD?) then (Sí)
          :Añadir 'Edad' a 'motivos';
        endif
        if (promedioUsoDiario >= UMBRAL_USO_EXCESIVO?) then (Sí)
          :Añadir 'Uso excesivo' a 'motivos';
        endif
        if (equipo.fallos >= UMBRAL_FALLOS?) then (Sí)
          :Añadir 'Fallos frecuentes' a 'motivos';
        endif
        if (Motivos tiene elementos?) then (Sí)
          :Añadir Equipo a 'candidatos' con sus propiedades y 'prioridad';
        endif
      end fork
    end fork
    :Ordenar 'candidatos' por prioridad y edad;
    if (Candidatos está vacío?) then (Sí)
      :Mostrar Alerta 'No se encontraron candidatos...';
    else (No)
      :Construir reporte detallado de candidatos;
      :Mostrar reporte en console.log y alert;
    endif
  endif
  end
}